@*
    Button
*@

@if (string.IsNullOrEmpty(Url))
{
<button class="@_cssClass" type="@Type" disabled="@Disabled"
        @onclick="@OnClickEvt"
        @attributes="AdditionalAttributes">

    @if (!string.IsNullOrEmpty(Icon))
    {
<i class="@($"fa{(IconRegular ? "r" : "")} fa-{Icon}")" />}

    @Text

</button> }
else
{
<NavLink class="@_cssClass"
         href="@Url"
         @attributes="AdditionalAttributes">

    @if (!string.IsNullOrEmpty(Icon))
    {
<i class="@($"fa{(IconRegular ? "r" : "")} fa-{Icon}")" />}

    @Text

</NavLink>}

@code { private string _cssClass => $"btn-component btn-component-{Color} {(Outline ? "btn-component-outline" : "")} {CssClass}";

    /// <summary>
    /// button, submit, reset
    /// </summary>
    [Parameter] public string Type { get; set; } = "button";

    [Parameter] public string Text { get; set; }

    [Parameter] public string CssClass { get; set; }

    [Parameter] public bool Outline { get; set; }

    /// <summary>
    /// Parameters: red, green, blue, yellow, orange, purple
    /// </summary>
    [Parameter] public string Color { get; set; }

    /// <summary>
    /// NavLink
    /// </summary>
    [Parameter] public string Url { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter] public EventCallback<object> OnClick { get; set; } = new EventCallback<object>();
    [Parameter] public object OnClickParameter { get; set; }

    private async Task OnClickEvt(MouseEventArgs e)
    {
        await OnClick.InvokeAsync(OnClickParameter);
    }

    /// <summary>
    /// Icon from Font Awesome [fa-*]
    /// </summary>
    [Parameter] public string Icon { get; set; }
    [Parameter] public bool IconRegular { get; set; }

    [Parameter] public bool Disabled { get; set; } }
