@*
    Field Date (input type date)
*@

@typeparam Model
@typeparam ValueType

<fieldset class="col-md-@Col field-input">

    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@ElemRef.Id" class="@(isFocus ? "purple" : "")">
            <DisplayName Model="Model" Name="@Label" />
        </label>
    }

    <input type="date" value="@_valueStr" required="@Required" id="@ElemRef.Id"
           @attributes="AdditionalAttributes"
           @onfocus="ToggleFocus"
           @onblur="ToggleFocus"
           @ref="ElemRef"
           autocomplete="off" />

</fieldset>

@code {

    private ElementReference ElemRef = new ElementReference("fielddate-" + Guid.NewGuid());

    private ValueType _value;

    [Parameter]
    public ValueType Value
    {
        get => _value;
        set { if (!Value.Equals(value)) _value = value; ValueChanged.InvokeAsync(value); }
    }

    [Parameter] public EventCallback<ValueType> ValueChanged { get; set; }

    [Parameter] public string Label { get; set; }

    [Parameter] public bool Required { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter] public int Col { get; set; } = 12;

    private bool isFocus;

    protected void ToggleFocus() => isFocus = !isFocus;

    private string _valueStr;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _valueStr = DateTimeOffset.Parse(Value.ToString()).ToString("yyyy-MM-dd") ?? string.Empty;
    }

}
